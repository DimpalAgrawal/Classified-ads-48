import { LIS } from "../../helpers/lis";
import FontPicker from "font-picker";
const __font__ = window["__font__"];

export const setupFontPicker = () => {
  // eslint-disable-next-line max-len
  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ FONTPICKER @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  let fontPicker;
  // In case font is chosen for input in a form
  // 'font' is a hidden input
  // Add 'apply-font' class to 'pell-content' which is generated by pell dynamically.
  if (LIS.id("font-picker") && LIS.id("font")) {
    document
      .getElementsByClassName("pell-content")[0]
      .classList.add("apply-font");
    fontPicker = new FontPicker(
      process.env.GOOGLE_FONT_API, // Google API key
      "Open Sans", // Default font
      { limit: 30 } // Additional options
    );
    fontPicker.setOnChange(function (font) {
      LIS.id("font").value = font.family;
    });
    // In case font is chosen for output
    // Hide FontPicker and apply 'font'
  } else if (LIS.id("font-picker") && typeof __font__ != "undefined") {
    fontPicker = new FontPicker(
      process.env.GOOGLE_FONT_API, // Google API key
      "Open Sans", // Default font
      { limit: 30 } // Additional options
    );
    LIS.id("font-picker").style.display = "none";
    // Wait for fontPicker.getFonts() to load
    setTimeout(() => {
      if ([...fontPicker.getFonts().keys()].indexOf(__font__)) {
        fontPicker.setActiveFont(__font__);
      } else {
        setTimeout(() => {
          if ([...fontPicker.getFonts().keys()].indexOf(__font__)) {
            fontPicker.setActiveFont(__font__);
          }
        }, 3000);
      }
    }, 3000);
  }
};
